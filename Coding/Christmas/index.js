function createStars() {
  const starsContainer = document.querySelector(".snow-container");
  const numberOfStars = 100;

  for (let i = 0; i < numberOfStars; i++) {
    const star = document.createElement("div");
    star.classList.add("star");
    star.style.left = Math.random() * 100 + "%";
    star.style.top = Math.random() * 60 + "%"; // Ch·ªâ ·ªü n·ª≠a tr√™n m√†n h√¨nh
    star.style.animationDelay = Math.random() * 2 + "s";
    starsContainer.appendChild(star);
  }
}

// G·ªçi h√†m t·∫°o sao khi trang web load
createStars();

function createSnow() {
  const snowContainer = document.querySelector(".snow-container");
  const snow = document.createElement("div");
  snow.classList.add("snow");

  // V·ªã tr√≠ ng·∫´u nhi√™n theo chi·ªÅu ngang
  snow.style.left = Math.random() * 100 + "%";

  // T·ªëc ƒë·ªô r∆°i v√† k√≠ch th∆∞·ªõc ng·∫´u nhi√™n
  const duration = Math.random() * 5 + 5;
  const size = Math.random() * 3 + 2;

  snow.style.width = size + "px";
  snow.style.height = size + "px";
  snow.style.opacity = Math.random() * 0.7 + 0.3;

  // Th√™m animation
  snow.style.animation = `fall ${duration}s linear`;

  snowContainer.appendChild(snow);

  // X√≥a b√¥ng tuy·∫øt sau khi r∆°i xong
  setTimeout(() => {
    snow.remove();
  }, duration * 1000);
}

// C·∫≠p nh·∫≠t keyframes animation
const style = document.createElement("style");
style.textContent = `
  @keyframes fall {
    from {
      transform: translateY(-10px);
    }
    to {
      transform: translateY(100vh);
    }
  }
  
  @keyframes sway {
    from {
      transform: translateX(-15px);
    }
    to {
      transform: translateX(15px);
    }
  }
`;
document.head.appendChild(style);

// T·∫°o tuy·∫øt v·ªõi t·∫ßn su·∫•t th·∫•p h∆°n
setInterval(createSnow, 200);

// Th√™m v√†o cu·ªëi file
const musicBtn = document.querySelector(".music-toggle");
const audio = document.getElementById("bgMusic");

musicBtn.addEventListener("click", () => {
  if (audio.paused) {
    audio.play();
    musicBtn.textContent = "üîä";
  } else {
    audio.pause();
    musicBtn.textContent = "üîà";
  }
});

// Th√™m hi·ªáu ·ª©ng di chuy·ªÉn cho √¥ng gi√† Noel
function moveSanta() {
  const santaContainer = document.querySelector(".santa-container");

  // Reset v·ªã tr√≠ khi √¥ng gi√† Noel bay ra kh·ªèi m√†n h√¨nh
  setInterval(() => {
    const rect = santaContainer.getBoundingClientRect();
    if (rect.left > window.innerWidth) {
      santaContainer.style.left = "-200px";
    }
  }, 100);
}

// G·ªçi h√†m di chuy·ªÉn √¥ng gi√† Noel
moveSanta();

// Th√™m hi·ªáu ·ª©ng qu√† r∆°i
function createGift() {
  const gift = document.createElement("div");
  gift.classList.add("gift");

  // V·ªã tr√≠ ng·∫´u nhi√™n theo chi·ªÅu ngang
  const randomX = Math.random() * (window.innerWidth - 40); // Tr·ª´ ƒëi k√≠ch th∆∞·ªõc gift
  gift.style.left = randomX + "px";
  gift.style.top = "-50px";

  const messages = [
    "üéÅ Ch√∫c b·∫°n! S·ªõm c√≥ ƒë∆∞·ª£c t√¥i:>>",
    "üéÅ Ch√∫c m·ª´ng! B·∫°n nh·∫≠n ƒë∆∞·ª£c m·ªôt ƒëi·ªÅu ∆∞·ªõc",
    "üéÑ Gi√°ng sinh an l√†nh!",
    "‚≠ê NƒÉm m·ªõi h·∫°nh ph√∫c!",
    "üéÖ Hi Hi Hi! Qu√† t·ª´ √¥ng gi√† Noel",
    "üåü Gi√°ng sinh n√†y s·∫Ω l√† m·ªôt m√πa tuy·ªát v·ªùi!",
    "üéÅ Ch√∫c b·∫°n ƒë√≥n m·ªôt m√πa Gi√°ng sinh ·∫•m √°p v√† h·∫°nh ph√∫c!",
    "üéÑ Ch√∫c c√¥ g√°i xinh ƒë·∫πp c√≥ m·ªôt Gi√°ng sinh th·∫≠t vui v·∫ª!",
    "üí´ C√πng nhau t·∫°o ra nh·ªØng k·ª∑ ni·ªám ƒë·∫πp trong m√πa Gi√°ng sinh n√†y!",
    "‚ùÑÔ∏è Gi√°ng sinh ng·ªçt ng√†o nh∆∞ n·ª• c∆∞·ªùi c·ªßa b·∫°n!",
    "‚ú® NƒÉm m·ªõi ƒë·∫øn, hy v·ªçng s·∫Ω c√≥ nhi·ªÅu ni·ªÅm vui b√™n b·∫°n!",
    "üåü C√¥ g√°i xinh ƒë·∫πp, ch√∫c b·∫°n m·ªôt m√πa Gi√°ng sinh an l√†nh!",
    "üéÖ √îng gi√† Noel s·∫Ω mang ƒë·∫øn cho b·∫°n nh·ªØng m√≥n qu√† ƒë·∫∑c bi·ªát!",
    "üå≤ Gi√°ng sinh n√†y, ch√∫c b·∫°n ƒë√≥n nh·∫≠n t√¨nh y√™u v√† h·∫°nh ph√∫c!",
    "‚ùÑÔ∏è Gi√°ng sinh vui v·∫ª v√† ·∫•m √°p ƒë·∫øn t·ª´ tr√°i tim c·ªßa b·∫°n!",
    "üéÅ Ch√∫c m·ª´ng Gi√°ng sinh, m·ªôt m√πa c·ªßa t√¨nh y√™u v√† ni·ªÅm vui!",
    "üåü M√πa Gi√°ng sinh l√† d·ªãp tuy·ªát v·ªùi ƒë·ªÉ chia s·∫ª y√™u th∆∞∆°ng!",
    "üéÑ Ch√∫c c√¥ ny c·ªßa t√¥i m·ªôt Gi√°ng sinh ƒë·∫ßy b·∫•t ng·ªù!",
    "‚ú® M√πa Gi√°ng sinh n√†y, mong b·∫°n nh·∫≠n ƒë∆∞·ª£c t·∫•t c·∫£ nh·ªØng g√¨ t·ªët ƒë·∫πp nh·∫•t!",
    "‚ùÑÔ∏è H√£y c√πng nhau ch√†o ƒë√≥n m·ªôt nƒÉm m·ªõi v·ªõi bao ∆∞·ªõc m∆° m·ªõi!",
    "üéÅ T·∫∑ng b·∫°n m√≥n qu√† ƒë·∫∑c bi·ªát nh·∫•t trong m√πa Gi√°ng sinh n√†y!",
    "üå≤ Ch√∫c b·∫°n Gi√°ng sinh an l√†nh v√† nƒÉm m·ªõi h·∫°nh ph√∫c!",
    "üéÖ M·ª´ng Gi√°ng sinh, ch√∫c b·∫°n s·ª©c kh·ªèe v√† h·∫°nh ph√∫c b√™n gia ƒë√¨nh!",
    "üí´ Gi√°ng sinh vui v·∫ª v√† ng·ªçt ng√†o nh∆∞ nh·ªØng l·ªùi ch√∫c c·ªßa t√¥i!",
    "üéÅ Hy v·ªçng Gi√°ng sinh n√†y mang ƒë·∫øn cho b·∫°n nh·ªØng ƒëi·ªÅu tuy·ªát v·ªùi!",
    "üéÑ M√πa Gi√°ng sinh n√†y, c√πng nhau ƒë√≥n nh·∫≠n ni·ªÅm vui v√† y√™u th∆∞∆°ng!",
    "üåü Ch√∫c b·∫°n m·ªôt Gi√°ng sinh ·∫•m √°p v√† tr√†n ng·∫≠p y√™u th∆∞∆°ng!",
    "‚ùÑÔ∏è C·∫£m ∆°n v√¨ ƒë√£ lu√¥n b√™n t√¥i, ch√∫c b·∫°n m·ªôt m√πa Gi√°ng sinh h·∫°nh ph√∫c!",
    "‚ú® Gi√°ng sinh an l√†nh, mong nh·ªØng ƒëi·ªÅu t·ªët ƒë·∫πp nh·∫•t ƒë·∫øn v·ªõi b·∫°n!",
    "üéÖ Ch√∫c c√¥ g√°i xinh ƒë·∫πp c√≥ m·ªôt m√πa Gi√°ng sinh th·∫≠t tuy·ªát v·ªùi!",
    "üéÑ Gi√°ng sinh n√†y, hy v·ªçng b·∫°n s·∫Ω c√≥ th·∫≠t nhi·ªÅu ni·ªÅm vui v√† h·∫°nh ph√∫c!",
    "üéÅ M√πa Gi√°ng sinh n√†y, t√¥i hy v·ªçng b·∫°n nh·∫≠n ƒë∆∞·ª£c m√≥n qu√† ƒë·∫∑c bi·ªát!",
    "‚ùÑÔ∏è M√πa Gi√°ng sinh s·∫Ω tr·ªü n√™n √Ω nghƒ©a h∆°n khi c√≥ b·∫°n b√™n c·∫°nh!",
    "‚ú® M·ªôt Gi√°ng sinh ƒë·∫ßy t√¨nh y√™u v√† h·∫°nh ph√∫c cho b·∫°n!",
    "üå≤ Ch√∫c b·∫°n m√πa Gi√°ng sinh ·∫•m √°p v√† t∆∞∆°i ƒë·∫πp!",
    "üéÅ M√πa Gi√°ng sinh n√†y, ch√∫c b·∫°n ƒë·∫°t ƒë∆∞·ª£c t·∫•t c·∫£ nh·ªØng ∆∞·ªõc m∆° c·ªßa m√¨nh!",
    "üåü C√¥ g√°i xinh ƒë·∫πp, ch√∫c b·∫°n c√≥ m·ªôt Gi√°ng sinh th·∫≠t vui v·∫ª v√† √Ω nghƒ©a!",
    "üéÑ Ch√∫c b·∫°n c√≥ m·ªôt Gi√°ng sinh an l√†nh v√† m·ªôt nƒÉm m·ªõi ƒë·∫ßy th√†nh c√¥ng!",
    "üéÖ M√πa Gi√°ng sinh n√†y, mong b·∫°n lu√¥n g·∫∑p may m·∫Øn v√† h·∫°nh ph√∫c!",
    "üéÅ Gi√°ng sinh n√†y, ch√∫c b·∫°n vui v·∫ª v√† th√†nh c√¥ng trong m·ªçi lƒ©nh v·ª±c!",
    "‚ú® Hy v·ªçng m√πa Gi√°ng sinh n√†y s·∫Ω mang ƒë·∫øn cho b·∫°n ni·ªÅm vui b·∫•t t·∫≠n!",
    "üéÑ Ch√∫c b·∫°n c√≥ m·ªôt m√πa Gi√°ng sinh ·∫•m √°p b√™n nh·ªØng ng∆∞·ªùi th√¢n y√™u!",
    "üéÖ √îng gi√† Noel s·∫Ω ƒëem ƒë·∫øn nh·ªØng m√≥n qu√† tuy·ªát v·ªùi cho b·∫°n!",
    "‚ùÑÔ∏è Ch√∫c b·∫°n m·ªôt m√πa Gi√°ng sinh th·∫≠t an l√†nh v√† h·∫°nh ph√∫c!",
    "üéÅ M√πa Gi√°ng sinh n√†y, t√¥i mong r·∫±ng b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c nh·ªØng ƒëi·ªÅu t·ªët ƒë·∫πp!",
    "üåü Ch√∫c b·∫°n c√≥ m·ªôt Gi√°ng sinh tuy·ªát v·ªùi v√† tr√†n ƒë·∫ßy y√™u th∆∞∆°ng!",
    "‚ú® M√πa Gi√°ng sinh n√†y, hy v·ªçng b·∫°n s·∫Ω lu√¥n g·∫∑p ƒë∆∞·ª£c nh·ªØng ƒëi·ªÅu may m·∫Øn!",
    "üéÑ Gi√°ng sinh an l√†nh, h·∫°nh ph√∫c v√† nhi·ªÅu ni·ªÅm vui ƒë·∫øn v·ªõi b·∫°n!",
    "üéÖ M√πa Gi√°ng sinh n√†y, ch√∫c b·∫°n m·ªôt nƒÉm m·ªõi th√†nh c√¥ng v√† h·∫°nh ph√∫c!",
    "üéÅ Hy v·ªçng m√πa Gi√°ng sinh n√†y s·∫Ω l√† m·ªôt kh·ªüi ƒë·∫ßu m·ªõi ƒë·∫ßy hy v·ªçng!",
    "üå≤ Gi√°ng sinh vui v·∫ª, y√™u th∆∞∆°ng v√† m√£i m√£i b√™n nhau!",
    "üéÑ M√πa Gi√°ng sinh n√†y, c√πng nhau ƒë√≥n nh·∫≠n m·ªçi ni·ªÅm vui v√† h·∫°nh ph√∫c!",
    "‚ú® Ch√∫c b·∫°n m·ªôt Gi√°ng sinh ƒë·∫ßm ·∫•m b√™n gia ƒë√¨nh v√† ng∆∞·ªùi th√¢n y√™u!",
    "üéÅ M√πa Gi√°ng sinh n√†y, c√πng nhau chia s·∫ª t√¨nh y√™u v√† ni·ªÅm vui!",
    "üåü Ch√∫c b·∫°n m·ªôt m√πa Gi√°ng sinh ƒë·∫ßy ·∫Øp nh·ªØng kho·∫£nh kh·∫Øc ng·ªçt ng√†o!",
    "‚ùÑÔ∏è Ch√∫c b·∫°n c√≥ m·ªôt Gi√°ng sinh an l√†nh, vui v·∫ª v√† tr√†n ng·∫≠p t√¨nh y√™u!",
    "üéÑ C·∫£m ∆°n v√¨ ƒë√£ l√† m·ªôt ph·∫ßn quan tr·ªçng trong cu·ªôc s·ªëng c·ªßa t√¥i. Ch√∫c b·∫°n Gi√°ng sinh an l√†nh!",
    "üéÅ Gi√°ng sinh an l√†nh v√† nƒÉm m·ªõi th·∫≠t h·∫°nh ph√∫c ƒë·∫øn v·ªõi b·∫°n!",
    "üåü Ch√∫c b·∫°n c√≥ m·ªôt Gi√°ng sinh th·∫≠t ƒë·∫∑c bi·ªát v√† m·ªôt nƒÉm m·ªõi t∆∞∆°i s√°ng!",
  ];

  gift.addEventListener("click", () => {
    const popup = document.createElement("div");
    popup.classList.add("gift-popup");
    popup.textContent = messages[Math.floor(Math.random() * messages.length)];
    document.body.appendChild(popup);
    popup.style.display = "block";

    // Hi·ªáu ·ª©ng √¢m thanh khi m·ªü qu√†
    const unwrapSound = new Audio("unwrap.mp3");
    unwrapSound.play();

    setTimeout(() => {
      popup.style.display = "none";
      popup.remove();
    }, 3000);

    gift.remove();
  });

  document.body.appendChild(gift);

  // Animation r∆°i m∆∞·ª£t m√† h∆°n
  let pos = -50;
  let speed = 1;
  const maxSpeed = 3;
  const acceleration = 0.05;

  const fall = setInterval(() => {
    speed = Math.min(speed + acceleration, maxSpeed);
    pos += speed;
    gift.style.top = pos + "px";

    // Ki·ªÉm tra va ch·∫°m v·ªõi ƒë√°y m√†n h√¨nh
    if (pos > window.innerHeight) {
      clearInterval(fall);
      gift.remove();
    }
  }, 20);
}

// Gi·∫£m t·∫ßn su·∫•t t·∫°o qu√†
setInterval(createGift, 1000); // 8 gi√¢y m·ªôt l·∫ßn

function addTreeLights() {
  const tree = document.querySelector(".tree");
  const colors = ["#ff0", "#f00", "#0f0", "#00f", "#ff0"];

  for (let i = 0; i < 20; i++) {
    const light = document.createElement("div");
    light.classList.add("light");
    light.style.background = colors[Math.floor(Math.random() * colors.length)];
    light.style.left = Math.random() * 100 + "%";
    light.style.top = Math.random() * 100 + "%";
    light.style.animationDelay = Math.random() * 2 + "s";
    tree.appendChild(light);
  }
}

function updateCountdown() {
  const christmas = new Date(new Date().getFullYear(), 11, 25);
  const now = new Date();
  const diff = christmas - now;

  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((diff % (1000 * 60)) / 1000);

  document.getElementById("days").textContent = days
    .toString()
    .padStart(2, "0");
  document.getElementById("hours").textContent = hours
    .toString()
    .padStart(2, "0");
  document.getElementById("minutes").textContent = minutes
    .toString()
    .padStart(2, "0");
  document.getElementById("seconds").textContent = seconds
    .toString()
    .padStart(2, "0");
}

setInterval(updateCountdown, 1000);

// Hi·ªáu ·ª©ng m√¢y tr√¥i
function animateClouds() {
  const clouds = document.querySelectorAll(".cloud");
  clouds.forEach((cloud, index) => {
    cloud.style.animation = `float ${15 + index * 2}s linear infinite`;
    cloud.style.top = `${index * 15}%`;
  });
}

// Hi·ªáu ·ª©ng ph√°o hoa
function createFirework(x, y) {
  const colors = ["#ff0", "#ff4", "#4ff", "#f4f", "#4f4"];
  const particles = 30;
  const container = document.querySelector(".fireworks-container");

  // Gi·ªõi h·∫°n t·ªça ƒë·ªô y trong ph·∫°m vi container
  const containerRect = container.getBoundingClientRect();
  y = Math.min(y, containerRect.height);

  for (let i = 0; i < particles; i++) {
    const particle = document.createElement("div");
    particle.className = "firework-particle";
    particle.style.backgroundColor =
      colors[Math.floor(Math.random() * colors.length)];

    const angle = (i * 360) / particles;
    const velocity = 2 + Math.random() * 2;

    particle.style.left = x + "px";
    particle.style.top = y + "px";

    container.appendChild(particle);

    const rad = (angle * Math.PI) / 180;
    const vx = Math.cos(rad) * velocity;
    const vy = Math.sin(rad) * velocity;

    let posX = x;
    let posY = y;

    const animate = () => {
      posX += vx;
      posY += vy;

      // Gi·ªõi h·∫°n ph·∫°m vi di chuy·ªÉn trong container
      if (
        posX < 0 ||
        posX > containerRect.width ||
        posY < 0 ||
        posY > containerRect.height
      ) {
        particle.remove();
        return;
      }

      particle.style.left = posX + "px";
      particle.style.top = posY + "px";

      requestAnimationFrame(animate);
    };

    animate();
  }
}

// Hi·ªáu ·ª©ng particle khi di chu·ªôt
function createParticle(e) {
  const particle = document.createElement("div");
  particle.className = "mouse-particle";
  particle.style.left = e.pageX + "px";
  particle.style.top = e.pageY + "px";
  document.body.appendChild(particle);

  setTimeout(() => particle.remove(), 1000);
}

// Th√™m t∆∞∆°ng t√°c v·ªõi c√¢y th√¥ng
function addTreeInteraction() {
  const tree = document.querySelector(".tree");
  const bells = document.querySelectorAll(".bell");

  tree.addEventListener("click", () => {
    tree.classList.add("shake");

    // Th√™m hi·ªáu ·ª©ng rung cho chu√¥ng
    bells.forEach((bell) => {
      bell.style.animation = "none";
      bell.offsetHeight; // Trigger reflow
      bell.style.animation = "bellRing 0.5s";
    });

    setTimeout(() => {
      tree.classList.remove("shake");
      bells.forEach((bell) => {
        bell.style.animation = "bellRing 2s infinite";
      });
    }, 500);
  });
}

// Th√™m h√†m trang tr√≠ c√¢y th√¥ng m·ªõi
function decorateTree() {
  const tree = document.querySelector(".tree");
  const layers = document.querySelectorAll(".tree-layer");

  // Th√™m chu√¥ng
  const bellPositions = [
    { left: "40%", top: "20%" },
    { right: "20%", top: "40%" },
    { left: "30%", top: "60%" },
    { right: "25%", top: "70%" },
  ];

  bellPositions.forEach((pos) => {
    const bell = document.createElement("div");
    bell.className = "bell";
    Object.assign(bell.style, pos);
    tree.appendChild(bell);
  });

  // Th√™m c√°c qu·∫£ ch√¢u
  const colors = ["red", "gold", "silver"];
  layers.forEach((layer) => {
    const layerRect = layer.getBoundingClientRect();
    const numOrnaments = 8;

    for (let i = 0; i < numOrnaments; i++) {
      const ornament = document.createElement("div");
      ornament.className = `ornament ${
        colors[Math.floor(Math.random() * colors.length)]
      }`;

      // V·ªã tr√≠ ng·∫´u nhi√™n trong ph·∫°m vi c·ªßa t·∫ßng
      const left = 20 + Math.random() * 60; // 20% ƒë·∫øn 80%
      const top = 20 + Math.random() * 60; // 20% ƒë·∫øn 80%

      ornament.style.left = `${left}%`;
      ornament.style.top = `${top}%`;

      layer.appendChild(ornament);
    }
  });

  // Th√™m hi·ªáu ·ª©ng l·∫•p l√°nh
  const lights = 30;
  for (let i = 0; i < lights; i++) {
    const light = document.createElement("div");
    light.className = "light";
    light.style.left = `${Math.random() * 100}%`;
    light.style.top = `${Math.random() * 100}%`;
    light.style.animationDelay = `${Math.random() * 2}s`;
    light.style.background = `hsl(${Math.random() * 360}, 100%, 70%)`;
    tree.appendChild(light);
  }
}

// Kh·ªüi t·∫°o c√°c hi·ªáu ·ª©ng
document.addEventListener("DOMContentLoaded", () => {
  const treeImage = document.querySelector(".tree img"); // Gi·∫£ s·ª≠ ·∫£nh c√¢y th√¥ng n·∫±m trong class .tree

  // N·∫øu ·∫£nh ƒë√£ load xong
  if (treeImage.complete) {
    decorateTree();
    addTreeLights();
  } else {
    // N·∫øu ·∫£nh ch∆∞a load xong, ƒë·ª£i s·ª± ki·ªán load
    treeImage.addEventListener("load", () => {
      decorateTree();
      addTreeLights();
    });
  }

  // C√°c hi·ªáu ·ª©ng kh√°c v·∫´n gi·ªØ nguy√™n
  animateClouds();
  addTreeInteraction();

  document.addEventListener("click", (e) => {
    createFirework(e.pageX, e.pageY);
    createParticle(e);
  });

  document.addEventListener("mousemove", (e) => {
    if (Math.random() < 0.1) {
      createParticle(e);
    }
  });
});
